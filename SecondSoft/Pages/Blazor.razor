@page "/Blazor"

<style>
    body {
        background-color: #222B31 !important;
    }

    .title {
        color: black;
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        font-size: 100px;
        font-weight: bold
    }

    img {
        width: 80%;
        height: 300px;
    }
</style>

<PageTitle>Why Blazor</PageTitle>
<body class="is-preload">
    <div id="wrapper">
        <header id="header">
            <a href="blazor" class="logo">
                Why Dinand chooses Blazor
            </a>
        </header>
        <div class="upperblock maintext">The right choice</div>
        <!-- Main -->
        <div id="main" style="padding-left:20px;">
            <p>
                <h4> NATIVE</h4>
                Blazor framework gives you the most native way to work with backend code right in your front-end.<br />
                <br />
                <h4>NO CONVERSION</h4>
                The first framework that shows you the data without converting it. <br />
                <br />
                <h4>Work DRY</h4>
                Working with <img style="height:2em;width:auto;" src="./images/blazor_icon.png" /> blazor means you can program DRY (Don't Repeat Yourself)<br />
                <br />

                <h4>COMPONENTS</h4>
                You create (razor) components to store your content and functionality.<br />
                Add that as a tag on the page or use it as a page itself. You can influence behavior with parameters.<br />

                <br />
                <img style="height:1.5em;width:auto;" src="./images/Showcase/nojs_red.png" /><br />
                Now you can work without JS 'libraries'.<br />
                <br />
                <h4>A Variety of libraries</h4>
                Blazor has its own sets of libraries.<br />
                <a target="_blank" href="https://mudblazor.com/"> <img style="height:2em;width:auto;" src="./images/Showcase/mudblazor.png" /></a> &nbsp;
                <a target="_blank" href="https://blazor.radzen.com/"> <img style="height:2em;width:auto;" src="./images/Showcase/radzen.png" /></a> &nbsp;
                <a target="_blank" href="https://blazorstrap.io/V5/"> <img style="height:2.5em;width:auto;" src="./images/Showcase/blazorstrap.png" /></a> &nbsp;
                <a target="_blank" href="https://github.com/Blazored"> <img style="height:2.5em;width:auto;" src="./images/Showcase/blazored.png" /></a>&nbsp;
                <a target="_blank" href="https://blazorise.com/"> <img style="height:2.5em;width:auto;" src="./images/Showcase/blazorise.png" /></a>&nbsp;
                <a target="_blank" href="https://blazorboilerplate.com/"> <img style="height:2.5em;width:auto;" src="./images/Showcase/BlazorBoilerplate.png" /></a><br />
                <a target="_blank" href="https://www.htmlelements.com/blazor/blazor-ui/demos/"> <img style="height:1.5em;width:auto;background-color:ThreeDDarkShadow;" src="./images/Showcase/SmartHtml.png" /></a>&nbsp;
                <a target="_blank" href="https://blazor.syncfusion.com/demos/"> <img style="height:1.5em;width:auto;background-color:white;" src="./images/Showcase/SyncFusion.png" /></a>&nbsp;

                <br />
                <h4>JS Regrets? Solved!</h4>
                Even better, you can work with JS if needed.

                <br />
                <br />
                <br />
            </p>
        </div>
    </div>
</body>
@code {
    private string? imageSource;
    private List<DashNote> Dnotes { get; set; } = new List<DashNote>();
    private bool ShowDetails { get; set; } = true;
    private bool ShowArchitecture { get; set; } = true;
    protected override async Task OnParametersSetAsync()
    {
        Dnotes.Add(new DashNote() { Title = "Staff and customers can order", Text = "Barmate takes care of it all.", Group = "business" });
        Dnotes.Add(new DashNote() { Title = "Sends the order through the stations", Text = "Various bars or cuisines.", Group = "" });
        Dnotes.Add(new DashNote() { Title = "Able to serve a food court", Text = "With multiple bars and restaurants or food trucks.", Group = "important" });
        Dnotes.Add(new DashNote() { Title = "Customers can", Text = "enable staff, can see their order history and status.", Group = "social" });
        Dnotes.Add(new DashNote() { Title = "Staff takes care of the payment", Text = "While customers will be able to pay themselves in the near future.", Group = "business" });
        Dnotes.Add(new DashNote() { Title = "Staff is always aware", Text = "And can check status in real time.", Group = "important" });
        ShowImage();
    }
    private void ShowImage()
    {
        imageSource = $"welcome.jpg";
    }
    private void Details()
    {
        ShowDetails = !ShowDetails;
        ShowArchitecture = true;
    }
    private void Architecture()
    {
        ShowArchitecture = !ShowArchitecture;
        ShowDetails = true;
    }
}



