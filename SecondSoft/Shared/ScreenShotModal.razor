<style>
    .imagesize {
        max-width: 50%;
        max-height:32em;
    }

    @@media screen and (max-width: 768px) {
         .imagesize {
        max-width: 80%;
    }
    }
</style>

<div class="modal fade-scale-sidebar " id="myModal" style="display:@Collapse;" aria-modal="true" role="dialog">
    <div class="modal-dialog" style="max-width:@bodyWidth !important">
        <div class="modal-content">
            @*Modal Header *@
            <div class="modal-header" style="display:block; padding:0px 7px; border-bottom:none">
                <a class="close" style="float: right; text-decoration: none;" @onclick="@(() => ReturnFunction.InvokeAsync("none"))"><h2 style="color:black;">&times;</h2></a>
            </div>
            @*modal-body*@
            <div class="modal-body row" style="text-align:center;">
                <a class="btn" @onclick="@(()=>next(-1))"><i class="fa-solid fa-circle-arrow-left"></i></a>
                <img class="imagesize" src="@CurrentImage.Url" />
                <a class="btn" @onclick="@(()=>next(1))"><i class="fa-solid fa-circle-arrow-right"></i></a>
                <div style="clear:both;"></div>
                <br/>
                <div style="color:#202124;text-align:center;">
                    @CurrentImage.Text
                </div>
            </div>
        </div>
    </div>
</div>
@code
{
    public void ModalCancel() => Collapse = "none";
}
@functions {
    [Parameter]
    public string Collapse { get; set; } = "none";
    [Parameter]
    public EventCallback<string> ReturnFunction { get; set; }
    [Parameter]
    public List<(int,string, string)> ScreenShots { get; set; } = new();
    [Parameter]
    public (int Id, string Url, string Text) CurrentImage { get; set; }
    private string bodyWidth;

    protected override async Task OnParametersSetAsync()
    {
       // bodyWidth = "850px";
    }
    private void next(int i)
    {
        var index = ScreenShots.IndexOf((CurrentImage));

        if (index + i < 0) index = ScreenShots.Count();
        else if (index == ScreenShots.Count() - 1 && i > 0) index = -1;
        CurrentImage = ScreenShots[index + i];
    }
}