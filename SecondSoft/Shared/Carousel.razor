@using System.Threading

@*https://www.youtube.com/c/DavidSeesSharp/*@
@*https://github.com/DavidEggenberger/DavidSeesSharp-Videos*@

@*<style>
    carouselsize {
        height: 400px;
    }

    @@media screen and (max-width: 736px) {
        carouselsize{
        height:300px;
        }
    }
</style>*@

<div class="d-flex flex-column border-primary alert alert-info col-12 col-md-5" style="background-color:transparent">
    <div class="d-flex justify-content-between align-items-center carouselsize">
        <img src="/Images/next.png" style="transform: rotate(180deg);" @onclick="() => Manualy(true)" />
        <div>
            @Render(currentPosition)
        </div>
        <img src="/Images/next.png" @onclick="() => Manualy(false)" />
    </div>
    <div class="d-flex justify-content-center">
        @foreach (var item in Components)
        {
            if (Math.Abs(currentPosition % Components.Length) == Array.IndexOf(Components, item))
            {
                <div class="alert alert-danger border-dark"></div>
            }
            else
            {
                <div class="alert alert-info border-dark"></div>
            }
        }
    </div>
</div>

@code {
    public void Manualy(bool backwards)
    {
        if (!cts.IsCancellationRequested)
            cts.Cancel();
        if (backwards)
            currentPosition--;
        else
            currentPosition++;
    }
    [Parameter]
    public Type[] Components { get; set; }
    [Parameter]
    public int DelayTime { get; set; } = 2500;
    int currentPosition;
    CancellationTokenSource cts;
    CancellationToken ct;
    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        ct = cts.Token;
        Walkthrough();
    }
    public async Task Walkthrough()
    {
        while (!ct.IsCancellationRequested)
        {
            await Task.Delay(DelayTime, ct);
            currentPosition++;
            await InvokeAsync(() => this.StateHasChanged());
        }
    }
    public RenderFragment Render(int position)
    {
        return RenderTreeBuilder =>
        {
            RenderTreeBuilder.OpenComponent(0, Components[Math.Abs(position % Components.Length)]);
            RenderTreeBuilder.CloseComponent();
        };
    }
}
